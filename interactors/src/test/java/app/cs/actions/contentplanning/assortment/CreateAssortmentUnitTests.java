package app.cs.actions.contentplanning.assortment;import static org.mockito.Mockito.verify;import static org.mockito.Mockito.when;import java.util.UUID;import org.junit.Before;import org.junit.Test;import org.junit.runner.RunWith;import org.mockito.Mock;import org.mockito.runners.MockitoJUnitRunner;import app.cs.impl.assortment.AssortmentRepository;import app.cs.impl.model.Assortment;import app.cs.impl.model.MultiDimensionalObject;import app.cs.model.request.CreateAssortmentRequest;@RunWith(MockitoJUnitRunner.class)public class CreateAssortmentUnitTests {	@Mock	private AssortmentRepository assortmentRepository;	private CreateAssortment createAssortment;	@Mock	private Assortment assortment;	@Before	public void setUp() {		createAssortment = new CreateAssortment(assortmentRepository);	}	@Test	public void itShouldCreateAnAssortment() {		// given		String path="Cp01,Mp01,P01";				MultiDimensionalObject assortmentObject = new MultiDimensionalObject();		assortmentObject.setPath(path);		assortmentObject.setProducts(assortment.getProducts());		assortmentObject.setId(UUID.randomUUID().toString());				CreateAssortmentRequest request = new CreateAssortmentRequest();		request.setAssortment(assortment);		request.setPath(path);		// when		when(assortmentRepository.getDomain("MultiDimensionalObject"))		.thenReturn(assortmentObject);		createAssortment.execute(request);		// then		verify(assortmentRepository).save(assortmentObject);	}}